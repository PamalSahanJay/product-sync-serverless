
service: poc-1-product-sync-serveless

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1

functions:
  createPorduct:
    handler: src/handler.createProduct
    role: ${env:IAM_ROLE}
    events:
      - http:
          method: post
          path: force-sync

  getProductData:
    handler: src/products.getProduct
    events:
      - http:
          method: post
          path: get-product

  triggerDynamoDB:
    handler: src/handler.getDynamoTableData
    role: ${env:IAM_ROLE}
    events:
      - stream:
          type: dynamodb
          arn:  !GetAtt [productTable, StreamArn]

  saveDataFromSQSToElastic:
    handler: src/handler.saveToElastic
    role: ${env:IAM_ROLE}
    events:
      - sqs:
          arn: !GetAtt MyQueue.Arn

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

resources:
  Resources:
    productTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:TABLE_NAME}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    MyKafkaCluster:
      Type: AWS::MSK::Cluster
      Properties:
        BrokerNodeGroupInfo:
          InstanceType: kafka.t3.small
          ClientSubnets:
            - subnet-0404893c8635c986f
            - subnet-080c262d4748c9ed5
        ClusterName: my-kafka-cluster
        KafkaVersion: 2.2.1
        NumberOfBrokerNodes: 2

    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: product-topic
        VisibilityTimeout: 30
        MaximumMessageSize: 2048
        MessageRetentionPeriod: 345600 


package:
 individually: true

useDotenv: true